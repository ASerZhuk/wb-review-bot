from urllib.parse import urlencode
from config import WEBHOOK_HOST  # –í–µ—Ä–Ω–µ–º –∏–º–ø–æ—Ä—Ç WEBHOOK_HOST

class PaymentManager:
    def __init__(self):
        self.wallet = "4100117527556990"  # –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney
        self.amount = 100  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        # –°—Å—ã–ª–∫–∞ –Ω–∞ FirebaseManager –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        self.firebase_manager = None

    def set_firebase_manager(self, firebase_manager):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ FirebaseManager –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É"""
        self.firebase_manager = firebase_manager
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ Firebase, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            price_from_db = self.firebase_manager.get_price()
            if price_from_db and price_from_db > 0:
                self.amount = price_from_db
        except Exception as e:
            print(f"Error loading price from Firebase: {str(e)}")

    def update_price(self, new_price: float) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ Firebase"""
        try:
            if new_price <= 0:
                return False
                
            self.amount = float(new_price)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ Firebase, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if self.firebase_manager:
                self.firebase_manager.update_price(new_price)
                
            return True
        except Exception as e:
            print(f"Error updating price: {str(e)}")
            return False

    def create_payment_link(self, user_id: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –¥–≤–æ–π–Ω—ã–µ —Å–ª–µ—à–∏
        success_url = f"{WEBHOOK_HOST}/webhook/payment-success?userId={user_id}"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –¥–≤–æ–π–Ω–æ–≥–æ —Å–ª–µ—à–∞ (–∫—Ä–æ–º–µ http://)
        success_url = success_url.replace("://", "$$PLACEHOLDER$$")
        success_url = success_url.replace("//", "/")
        success_url = success_url.replace("$$PLACEHOLDER$$", "://")
        
        payment_params = {
            'targets': '–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ WB',
            'default-sum': self.amount,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—É–º–º—É
            'button-text': 'pay',
            'any-card-payment-type': 'on',
            'button-size': 'm',
            'button-color': 'orange',
            'mail': 'on',
            'successURL': success_url,
            'quickpay-form': 'shop',
            'account': self.wallet,
            'label': f'wb_review_bot_{user_id}',
            'need-fio': 'false',
            'need-email': 'false',
            'need-phone': 'false',
            'redirect': 'true',
            'clearCache': 'true',
            'autoReturn': 'true',
            'targets-hint': '',
            'return-url': success_url
        }
        
        return f"https://yoomoney.ru/quickpay/button-widget?{urlencode(payment_params)}"

    def get_payment_message(self) -> tuple[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
        message = (
            "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞!\n\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫ - {self.amount}‚ÇΩ\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ø—ã—Ç–∫–∏ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )
        button_text = f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {self.amount}‚ÇΩ"
        return message, button_text

    def verify_payment(self, notification_data: dict) -> tuple[bool, int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
            amount = float(notification_data.get('amount', 0))
            if amount != self.amount:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
                return False, 0

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ label
            label = notification_data.get('label', '')
            if not label.startswith('wb_review_bot_'):
                return False, 0

            user_id = int(label.split('_')[-1])
            return True, user_id

        except Exception:
            return False, 0 