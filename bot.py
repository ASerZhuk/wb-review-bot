import telebot
import json
import requests
import re
import g4f
from telebot import types
from firebase_manager import FirebaseManager
from payment_manager import PaymentManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = '7909512676:AAHqSHHpM6QkJdGsisH9lbiv5-o4Veuv3oI'
bot = telebot.TeleBot(BOT_TOKEN)
bot.remove_webhook()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
firebase_manager = FirebaseManager()
payment_manager = PaymentManager()

# –î–æ–±–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (—É–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–µ ID)
ADMIN_IDS = [1312244058]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

class WbReview:
    def __init__(self, string: str):
        self.sku = self.get_sku(string=string)
        self.item_name = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ None
        self.root_id = None
        # –ü–æ–ª—É—á–∞–µ–º root_id –∏ item_name
        self.get_root_id()

    @staticmethod
    def get_sku(string: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞"""
        if "wildberries" in string:
            pattern = r"\d{7,15}"
            sku = re.findall(pattern, string)
            if sku:
                return sku[0]
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª")
        return string

    def get_root_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ id —Ä–æ–¥–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            response = requests.get(
                f'https://card.wb.ru/cards/v2/detail?appType=1&curr=rub&dest=-8144334&spp=30&nm={self.sku}',
                headers={'User-Agent': 'Mozilla/5.0'},
            )
            if response.status_code != 200:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å id —Ä–æ–¥–∏—Ç–µ–ª—è")
            
            data = response.json()
            if not data.get("data") or not data["data"].get("products") or len(data["data"]["products"]) == 0:
                raise Exception("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            product = data["data"]["products"][0]
            self.item_name = product.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            self.root_id = product.get("root")
            if not self.root_id:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å root_id —Ç–æ–≤–∞—Ä–∞")
            return self.root_id
        except Exception as e:
            print(f"Error in get_root_id: {str(e)}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {str(e)}")

    def get_review(self) -> json:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤"""
        if not self.root_id:
            raise Exception("root_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        try:
            response = requests.get(f'https://feedbacks1.wb.ru/feedbacks/v1/{self.root_id}', 
                                  headers={'User-Agent': 'Mozilla/5.0'})
            if response.status_code == 200:
                if not response.json()["feedbacks"]:
                    raise Exception("–°–µ—Ä–≤–µ—Ä 1 –Ω–µ –ø–æ–¥–æ—à–µ–ª")
                return response.json()
        except Exception:
            response = requests.get(f'https://feedbacks2.wb.ru/feedbacks/v1/{self.root_id}', 
                                  headers={'User-Agent': 'Mozilla/5.0'})
            if response.status_code == 200:
                return response.json()

    def parse(self):
        json_feedbacks = self.get_review()
        if not json_feedbacks:
            return []
        feedbacks = [feedback.get("text") for feedback in json_feedbacks["feedbacks"]
                     if str(feedback.get("nmId")) == self.sku]
        if len(feedbacks) > 80:
            feedbacks = feedbacks[:80]
        return feedbacks

def analyze_reviews(reviews_list):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤—ã —Å –ø–æ–º–æ—â—å—é G4F"""
    reviews_text = "\n\n".join(reviews_list)
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å Wildberries —Å–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞.
    –û—Ç–∑—ã–≤—ã:
    {reviews_text}
    
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
    
    ‚úÖ –ü–õ–Æ–°–´ –¢–û–í–ê–†–ê:
    - [–ø–µ—Ä–µ—á–∏—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ –æ—Ç–∑—ã–≤–∞—Ö, —Ç–µ–∑–∏—Å–Ω–æ]

    ‚ùå –ú–ò–ù–£–°–´ –¢–û–í–ê–†–ê:
    - [–ø–µ—Ä–µ—á–∏—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∏–Ω—É—Å—ã –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∞—Ç–∫–æ–≤ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤, —Ç–µ–∑–∏—Å–Ω–æ]

    üìù –û–ë–©–ò–ô –í–´–í–û–î:
    [–∫—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏e]
    
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—ã –≤ –æ—Ç–≤–µ—Ç. 
    """
    
    try:
        response = g4f.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        cleaned_response = re.sub(r'https?://\S+', '', response)
        return cleaned_response.strip()
    except Exception as e:
        try:
            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
            response = g4f.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}]
            )
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            cleaned_response = re.sub(r'https?://\S+', '', response)
            return cleaned_response.strip()
        except Exception as e2:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤: {str(e2)}"

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    analyze_button = types.InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞", callback_data="analyze")
    markup.add(analyze_button)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id in ADMIN_IDS:
        admin_button = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        markup.add(admin_button)
    
    bot.reply_to(message, 
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.\n\n"
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=markup)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "analyze":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, 
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, "
            "–∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã —Ç–æ–≤–∞—Ä–∞.")
    
    elif call.data == "admin_panel" and call.from_user.id in ADMIN_IDS:
        bot.answer_callback_query(call.id)
        show_admin_panel(call.message)
    
    elif call.data == "change_price" and call.from_user.id in ADMIN_IDS:
        bot.answer_callback_query(call.id)
        ask_new_price(call.message)

def show_admin_panel(message):
    markup = types.InlineKeyboardMarkup()
    change_price_button = types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫", callback_data="change_price")
    back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
    markup.add(change_price_button)
    markup.add(back_button)
    
    bot.edit_message_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        chat_id=message.chat.id,
        message_id=message.message_id,
        reply_markup=markup
    )

def ask_new_price(message):
    msg = bot.edit_message_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        chat_id=message.chat.id,
        message_id=message.message_id
    )
    bot.register_next_step_handler(msg, process_new_price)

def process_new_price(message):
    try:
        new_price = float(message.text)
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ PaymentManager –∏–ª–∏ Firebase
        payment_manager.update_price(new_price)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        bot.reply_to(message, f"‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_price} —Ä—É–±–ª–µ–π –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        send_welcome(message)
    except ValueError:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        send_welcome(message)

# –û–±–Ω–æ–≤–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–∏–≤ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text.isdigit() or 'wildberries' in message.text.lower():
        user_id = message.from_user.id
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
        attempts = firebase_manager.get_user_attempts(user_id)
        if attempts <= 0:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            markup = types.InlineKeyboardMarkup()
            payment_msg, button_text = payment_manager.get_payment_message()
            payment_button = types.InlineKeyboardButton(
                button_text,
                url=payment_manager.create_payment_link(user_id)
            )
            markup.add(payment_button)
            
            bot.reply_to(
                message,
                payment_msg,
                reply_markup=markup
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        processing_msg = bot.reply_to(
            message, 
            f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n"
            f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}"
        )
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
            review_handler = WbReview(text)
            reviews = review_handler.parse()
            
            if not reviews:
                bot.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞", 
                                    chat_id=message.chat.id, 
                                    message_id=processing_msg.message_id)
                return
                
            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤
            analysis = analyze_reviews(reviews)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            remaining_attempts = firebase_manager.decrease_attempts(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–∫–∞—Ö
            analysis_with_attempts = (
                f"{analysis}\n\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            bot.edit_message_text(
                analysis_with_attempts,
                chat_id=message.chat.id,
                message_id=processing_msg.message_id
            )
            
        except Exception as e:
            bot.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", 
                                chat_id=message.chat.id,
                                message_id=processing_msg.message_id)
    else:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞.")

if __name__ == '__main__':
    bot.polling(none_stop=False) 