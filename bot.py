import telebot
import json
import requests
import re
import g4f
from g4f.Provider import Blackbox
from telebot import types
from firebase_manager import FirebaseManager
from payment_manager import PaymentManager
import os
from flask import Flask
import logging
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ User-Agent –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 17_3_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.3.1 Mobile/15E148 Safari/604.1'
]

def get_random_headers():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    return {
        'User-Agent': random.choice(USER_AGENTS),
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Cache-Control': 'max-age=0'
    }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))

try:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    logger.info("Initializing Firebase Manager...")
    firebase_manager = FirebaseManager()
    logger.info("Initializing Payment Manager...")
    payment_manager = PaymentManager()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
    payment_manager.set_firebase_manager(firebase_manager)
    logger.info("Managers initialized successfully")
except Exception as e:
    logger.error(f"Error initializing managers: {str(e)}")
    raise

# –î–æ–±–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (—É–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–µ ID)
ADMIN_IDS = [1312244058]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
logger.info(f"Admin IDs: {ADMIN_IDS}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def split_long_message(text, max_length=3000):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    paragraphs = text.split('\n\n')
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
        if len(current_part) + len(paragraph) + 2 > max_length:
            parts.append(current_part.strip())
            current_part = paragraph + "\n\n"
        else:
            current_part += paragraph + "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        parts.append(current_part.strip())
    
    return parts

class WbReview:
    def __init__(self, string: str):
        self.sku = self.get_sku(string=string)
        self.item_name = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ None
        self.root_id = None
        # –ü–æ–ª—É—á–∞–µ–º root_id –∏ item_name
        self.get_root_id()

    @staticmethod
    def get_sku(string: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞"""
        if "wildberries" in string:
            pattern = r"\d{7,15}"
            sku = re.findall(pattern, string)
            if sku:
                return sku[0]
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª")
        return string

    def get_root_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ id —Ä–æ–¥–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            headers = get_random_headers()
            response = requests.get(
                f'https://card.wb.ru/cards/v2/detail?appType=1&curr=rub&dest=-8144334&spp=30&nm={self.sku}',
                headers=headers,
                timeout=10
            )
            if response.status_code == 403:
                # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                headers = get_random_headers()
                response = requests.get(
                    f'https://card.wb.ru/cards/v2/detail?appType=1&curr=rub&dest=-8144334&spp=30&nm={self.sku}',
                    headers=headers,
                    timeout=10
                )
            
            if response.status_code != 200:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å id —Ä–æ–¥–∏—Ç–µ–ª—è. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            data = response.json()
            if not data.get("data") or not data["data"].get("products") or len(data["data"]["products"]) == 0:
                raise Exception("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            product = data["data"]["products"][0]
            self.item_name = product.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            self.root_id = product.get("root")
            if not self.root_id:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å root_id —Ç–æ–≤–∞—Ä–∞")
            return self.root_id
        except Exception as e:
            logger.error(f"Error in get_root_id: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {str(e)}")

    def get_review(self) -> json:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤"""
        if not self.root_id:
            raise Exception("root_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        headers = get_random_headers()
        try:
            response = requests.get(
                f'https://feedbacks1.wb.ru/feedbacks/v1/{self.root_id}',
                headers=headers,
                timeout=10
            )
            if response.status_code == 403:
                # –ü—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                headers = get_random_headers()
                response = requests.get(
                    f'https://feedbacks1.wb.ru/feedbacks/v1/{self.root_id}',
                    headers=headers,
                    timeout=10
                )
            
            if response.status_code == 200:
                if not response.json().get("feedbacks"):
                    raise Exception("–°–µ—Ä–≤–µ—Ä 1 –Ω–µ –ø–æ–¥–æ—à–µ–ª")
                return response.json()
            
            # –ü—Ä–æ–±—É–µ–º –≤—Ç–æ—Ä–æ–π —Å–µ—Ä–≤–µ—Ä
            headers = get_random_headers()
            response = requests.get(
                f'https://feedbacks2.wb.ru/feedbacks/v1/{self.root_id}',
                headers=headers,
                timeout=10
            )
            if response.status_code == 200:
                return response.json()
            else:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            logger.error(f"Error in get_review: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")

    def parse(self):
        json_feedbacks = self.get_review()
        if not json_feedbacks:
            return []
        feedbacks = [feedback.get("text") for feedback in json_feedbacks["feedbacks"]
                     if str(feedback.get("nmId")) == self.sku]
        if len(feedbacks) > 80:
            feedbacks = feedbacks[:80]
        return feedbacks

def analyze_reviews(reviews_list):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤—ã —Å –ø–æ–º–æ—â—å—é G4F"""
    reviews_text = "\n\n".join(reviews_list)
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å Wildberries —Å–¥–µ–ª–∞–π –û–ß–ï–ù–¨ –ö–†–ê–¢–ö–ò–ô –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –±–æ–ª–µ–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤.
    –û—Ç–∑—ã–≤—ã:
    {reviews_text}
    
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
    
    ‚úÖ –ü–õ–Æ–°–´ –¢–û–í–ê–†–ê:
    - [–ø–µ—Ä–µ—á–∏—Å–ª–∏ —Ç–æ–ª—å–∫–æ 3-4 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø–ª—é—Å–æ–≤ –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ, –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∫–∞–∂–¥—ã–π]

    ‚ùå –ú–ò–ù–£–°–´ –¢–û–í–ê–†–ê:
    - [–ø–µ—Ä–µ—á–∏—Å–ª–∏ —Ç–æ–ª—å–∫–æ 3-4 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –º–∏–Ω—É—Å–æ–≤ –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ, –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∫–∞–∂–¥—ã–π]

    üìù –û–ë–©–ò–ô –í–´–í–û–î:
    [–∫—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏e]
    
    –í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º, –Ω–µ –±–æ–ª–µ–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏—Ç–æ–≥–µ.
    –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª–∏–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.
    """
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Blackbox –∏ –º–æ–¥–µ–ª—å deepseek-v3
        response = g4f.ChatCompletion.create(
            model="deepseek-v3",
            provider=Blackbox,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            messages=[{"role": "user", "content": prompt}],
            timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        )
        # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        cleaned_response = re.sub(r'https?://\S+', '', response)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        if len(cleaned_response) > 2500:
            cleaned_response = cleaned_response[:2500] + "..."
        return cleaned_response.strip()
    except Exception as e:
        logger.error(f"Error with Blackbox/deepseek-v3: {str(e)}")
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - DeepInfraChat
            logger.info("Trying fallback provider: DeepInfraChat")
            response = g4f.ChatCompletion.create(
                model="o3-mini",
                provider=Blackbox,
                messages=[{"role": "user", "content": prompt}],
                timeout=30
            )
            cleaned_response = re.sub(r'https?://\S+', '', response)
            if len(cleaned_response) > 2500:
                cleaned_response = cleaned_response[:2500] + "..."
            return cleaned_response.strip()
        except Exception as e2:
            logger.error(f"Error with fallback provider: {str(e2)}")
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@bot.message_handler(commands=['start'])
def start(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        first_name = message.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        attempts = firebase_manager.get_user_attempts(user_id)
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã —Å Wildberries. "
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª.\n\n"
            f"–£ —Ç–µ–±—è –µ—Å—Ç—å {attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        markup = None
        if attempts <= 0:
            markup = types.InlineKeyboardMarkup()
            payment_msg, button_text = payment_manager.get_payment_message()
            payment_button = types.InlineKeyboardButton(
                button_text,
                url=payment_manager.create_payment_link(user_id)
            )
            markup.add(payment_button)
            welcome_text += f"\n\n{payment_msg}"
        
        logger.info(f"Sending welcome message to user {user_id}")
        bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
        
    except Exception as e:
        logger.error(f"Error in start handler: {str(e)}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "analyze":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, 
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, "
            "–∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã —Ç–æ–≤–∞—Ä–∞.")
    
    elif call.data == "admin_panel" and call.from_user.id in ADMIN_IDS:
        bot.answer_callback_query(call.id)
        show_admin_panel(call.message)
    
    elif call.data == "change_price" and call.from_user.id in ADMIN_IDS:
        bot.answer_callback_query(call.id)
        ask_new_price(call.message)

def show_admin_panel(message):
    markup = types.InlineKeyboardMarkup()
    change_price_button = types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫", callback_data="change_price")
    back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
    markup.add(change_price_button)
    markup.add(back_button)
    
    bot.edit_message_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        chat_id=message.chat.id,
        message_id=message.message_id,
        reply_markup=markup
    )

def ask_new_price(message):
    msg = bot.edit_message_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        chat_id=message.chat.id,
        message_id=message.message_id
    )
    bot.register_next_step_handler(msg, process_new_price)

def process_new_price(message):
    try:
        new_price = float(message.text)
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ PaymentManager –∏–ª–∏ Firebase
        payment_manager.update_price(new_price)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        bot.send_message(message.chat.id, f"‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_price} —Ä—É–±–ª–µ–π –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        start(message)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        start(message)

@bot.message_handler(commands=['admin'])
def admin_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = message.from_user.id
    logger.info(f"Admin command received from user {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id in ADMIN_IDS:
        logger.info(f"User {user_id} is in admin list, showing admin panel")
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        markup = types.InlineKeyboardMarkup()
        change_price_button = types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫", callback_data="change_price")
        markup.add(change_price_button)
        
        bot.send_message(
            message.chat.id,
            "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
    else:
        logger.info(f"User {user_id} is NOT in admin list {ADMIN_IDS}")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")

@bot.message_handler(commands=['myid'])
def my_id_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ ID"""
    user_id = message.from_user.id
    bot.send_message(message.chat.id, f"–í–∞—à ID: {user_id}")

# –û–±–Ω–æ–≤–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–∏–≤ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@bot.message_handler(func=lambda message: not message.text.startswith('/'))
def handle_message(message):
    if message.text.isdigit() or 'wildberries' in message.text.lower():
        user_id = message.from_user.id
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
        attempts = firebase_manager.get_user_attempts(user_id)
        if attempts <= 0:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            markup = types.InlineKeyboardMarkup()
            payment_msg, button_text = payment_manager.get_payment_message()
            payment_button = types.InlineKeyboardButton(
                button_text,
                url=payment_manager.create_payment_link(user_id)
            )
            markup.add(payment_button)
            
            bot.send_message(
                message.chat.id,
                payment_msg,
                reply_markup=markup
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        processing_msg = bot.send_message(
            message.chat.id, 
            f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n"
            f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}"
        )
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
            review_handler = WbReview(text)
            reviews = review_handler.parse()
            
            if not reviews:
                bot.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞", 
                                    chat_id=message.chat.id, 
                                    message_id=processing_msg.message_id)
                return
                
            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤
            analysis = analyze_reviews(reviews)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            remaining_attempts = firebase_manager.decrease_attempts(user_id)
            
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–∫–∞—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º
            analysis_with_attempts = analysis
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            message_parts = split_long_message(analysis_with_attempts)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if len(message_parts) == 1:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –±–ª–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
                bot.edit_message_text(
                    message_parts[0],
                    chat_id=message.chat.id,
                    message_id=processing_msg.message_id
                )
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                bot.delete_message(message.chat.id, processing_msg.message_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
                for i, part in enumerate(message_parts):
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                        if len(part) > 4000:
                            shortened_part = part[:3950] + "..."
                            bot.send_message(message.chat.id, shortened_part)
                        else:
                            bot.send_message(message.chat.id, part)
                    except Exception as e:
                        logger.error(f"Error sending message part {i+1}: {str(e)}")
                        bot.send_message(
                            message.chat.id, 
                            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {str(e)}"
                        )
            
        except Exception as e:
            logger.error(f"Error processing message: {str(e)}")
            bot.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", 
                                chat_id=message.chat.id,
                                message_id=processing_msg.message_id)
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞.")

if __name__ == '__main__':
    logger.info("Starting bot...")
    if os.environ.get('WEBHOOK_ENABLED', 'false').lower() == 'true':
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –≤–µ–±—Ö—É–∫–æ–≤, —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ app.py
        logger.info("Webhook mode enabled")
        pass
    else:
        # –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        logger.info("Starting polling mode")
        bot.remove_webhook()
        bot.polling(none_stop=True) 